{"version":3,"sources":["components/GatewayForm.jsx","components/AlertDialog.jsx","components/DevicesList.jsx","components/DeviceForm.jsx","components/GatewayCard.jsx","services/gatewayService.js","services/deviceService.js","App.jsx","reportWebVitals.js","index.js"],"names":["GatewayForm","gateway","id","name","ipv4","open","handleSave","handleClose","useState","gatewayInfo","setGatewayInfo","Dialog","onClose","DialogTitle","DialogContent","TextField","inputProps","label","variant","onChange","value","target","DialogActions","Button","onClick","color","AlertDialog","setOpen","handleDelete","DialogContentText","autoFocus","DeviceItem","dev","setOpenAlert","setDevId","openEditForm","setSelectDevice","ListItem","ListItemIcon","status","fontSize","style","green","ListItemText","primary","secondary","vendor","ListItemSecondaryAction","IconButton","edge","DevicesList","gatewayId","devices","deleteDevice","openAlert","deviceId","List","component","subheader","ListSubheader","map","DeviceForm","device","handleCreate","handleUpdate","deviceInfo","setDeviceInfo","FormGroup","FormControlLabel","control","Switch","checked","undefined","GatewayCard","updateGateway","deleteGateway","createDevice","updateDevice","openForm","setOpenForm","openDeviceForm","setOpenDeviceForm","selectDevice","Accordion","defaultExpanded","AccordionSummary","expandIcon","Grid","container","spacing","item","xs","Typography","AccordionDetails","justifyContent","md","Divider","AccordionActions","size","SERVER_URL","fetchAllGateways","a","fetch","method","response","json","createGateway","data","headers","body","JSON","stringify","ok","Error","text","App","openError","setOpenError","errorMsg","setErrorMsg","gateways","setGateways","toBeDeleteGW","setToBeDeleteGW","fetchData","useEffect","handleGatewayUpdate","updatedData","message","handleGatewayDelete","handleGatewayCreate","handleDeviceUpdate","handleDeviceDelete","handleDeviceCreate","Fragment","CssBaseline","Container","maxWidth","paddingTop","g","Snackbar","autoHideDuration","anchorOrigin","vertical","horizontal","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","console","log"],"mappings":"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","file":"static/js/main.62a9e97b.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nconst GatewayForm = ({\n  gateway: { id, name, ipv4 } = { name: '', ipv4: '' },\n  open,\n  handleSave,\n  handleClose,\n}) => {\n  const [gatewayInfo, setGatewayInfo] = useState({ id, name, ipv4 });\n\n  return (\n    <Dialog\n      data-testid=\"gateway-form\"\n      open={open}\n      onClose={() => handleClose(false)}\n      aria-labelledby=\"form-dialog-title\"\n    >\n      <DialogTitle id=\"form-dialog-title\">Gateway Info</DialogTitle>\n      <DialogContent>\n        <TextField\n          inputProps={{ 'data-testid': 'gateway-form-name' }}\n          id=\"outlined-basic\"\n          label=\"Name\"\n          variant=\"outlined\"\n          onChange={({ target: { value } }) =>\n            setGatewayInfo({ ...gatewayInfo, name: value })\n          }\n          value={gatewayInfo.name}\n        />\n        <TextField\n          inputProps={{ 'data-testid': 'gateway-form-ipv4' }}\n          id=\"outlined-basic\"\n          label=\"IPv4\"\n          variant=\"outlined\"\n          onChange={({ target: { value } }) =>\n            setGatewayInfo({ ...gatewayInfo, ipv4: value })\n          }\n          value={gatewayInfo.ipv4}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={() => handleClose(false)} color=\"primary\">\n          Cancel\n        </Button>\n        <Button\n          onClick={() => {\n            handleSave(gatewayInfo);\n            handleClose(false);\n          }}\n          color=\"primary\"\n        >\n          Save\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default GatewayForm;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\n\nexport default function AlertDialog({ open, setOpen, handleDelete }) {\n  return (\n    <Dialog\n      data-testid=\"alert-dialog\"\n      open={open}\n      onClose={() => setOpen(false)}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n          Are you sure you want to delete?\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={() => setOpen(false)} color=\"primary\" autoFocus>\n          Cancel\n        </Button>\n        <Button\n          data-testid=\"delete-btn\"\n          onClick={() => {\n            handleDelete();\n            setOpen(false);\n          }}\n          color=\"secondary\"\n        >\n          Delete\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import React, { useState } from 'react';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport IconButton from '@material-ui/core/IconButton';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport ToggleOnIcon from '@material-ui/icons/ToggleOn';\nimport ToggleOffIcon from '@material-ui/icons/ToggleOff';\nimport { green } from '@material-ui/core/colors';\nimport AlertDialog from './AlertDialog';\n\nconst DeviceItem = ({\n  dev,\n  setOpenAlert,\n  setDevId,\n  openEditForm,\n  setSelectDevice,\n}) => (\n  <ListItem>\n    <ListItemIcon>\n      {dev.status === 'Online' && (\n        <ToggleOnIcon fontSize=\"large\" style={{ color: green[500] }} />\n      )}\n      {dev.status === 'Offline' && (\n        <ToggleOffIcon fontSize=\"large\" color=\"disabled\" />\n      )}\n    </ListItemIcon>\n    <ListItemText\n      primary={'ID: ' + dev.id}\n      secondary={'Vendor: ' + dev.vendor}\n    />\n    <ListItemSecondaryAction>\n      <IconButton\n        edge=\"end\"\n        aria-label=\"edit\"\n        onClick={() => {\n          setSelectDevice(dev);\n          openEditForm();\n        }}\n        data-testid=\"edit-device\"\n      >\n        <EditIcon />\n      </IconButton>\n      <IconButton\n        edge=\"end\"\n        aria-label=\"delete\"\n        onClick={() => {\n          setOpenAlert(true);\n          setDevId(dev.id);\n        }}\n        data-testid=\"delete-device\"\n      >\n        <DeleteIcon />\n      </IconButton>\n    </ListItemSecondaryAction>\n  </ListItem>\n);\n\nconst DevicesList = ({\n  gatewayId,\n  devices,\n  deleteDevice,\n  openEditForm,\n  setSelectDevice,\n}) => {\n  const [openAlert, setOpenAlert] = useState(false);\n  const [deviceId, setDevId] = useState(null);\n\n  return (\n    <List\n      component=\"nav\"\n      aria-labelledby=\"nested-list-subheader\"\n      subheader={\n        <ListSubheader component=\"div\" id=\"nested-list-subheader\">\n          Gateway Devices\n          <IconButton\n            data-testid=\"add-gateway-btn\"\n            color=\"primary\"\n            onClick={() => openEditForm(true)}\n          >\n            <AddCircleIcon fontSize=\"small\" color=\"primary\" />\n          </IconButton>\n        </ListSubheader>\n      }\n    >\n      {devices.map((dev) => (\n        <DeviceItem\n          key={dev.id}\n          dev={dev}\n          setOpenAlert={setOpenAlert}\n          setDevId={setDevId}\n          openEditForm={openEditForm}\n          setSelectDevice={setSelectDevice}\n        />\n      ))}\n      <AlertDialog\n        open={openAlert}\n        setOpen={setOpenAlert}\n        handleDelete={() => {\n          deleteDevice({ id: deviceId, gatewayId });\n          setOpenAlert(false);\n        }}\n      />\n    </List>\n  );\n};\n\nexport default DevicesList;\n","import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Switch from '@material-ui/core/Switch';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\n\nconst DeviceForm = ({\n  device: { id, vendor, status, gatewayId } = { vendor: '', status: 'Offline' },\n  open,\n  handleCreate,\n  handleUpdate,\n  handleClose,\n}) => {\n  const [deviceInfo, setDeviceInfo] = useState({\n    id,\n    vendor: vendor || '',\n    status: status || 'Offline',\n    gatewayId,\n  });\n\n  return (\n    <Dialog\n      data-testid=\"device-form\"\n      open={open}\n      onClose={() => handleClose(false)}\n      aria-labelledby=\"form-dialog-title\"\n    >\n      <DialogTitle id=\"form-dialog-title\">Device Info</DialogTitle>\n      <DialogContent>\n        <FormGroup>\n          <FormControlLabel\n            control={\n              <TextField\n                inputProps={{ 'data-testid': 'device-form-vendor' }}\n                id=\"outlined-basic\"\n                label=\"Vendor\"\n                variant=\"outlined\"\n                onChange={({ target: { value } }) =>\n                  setDeviceInfo({ ...deviceInfo, vendor: value })\n                }\n                value={deviceInfo.vendor}\n              />\n            }\n          />\n          <FormControlLabel\n            control={\n              <Switch\n                inputProps={{ 'data-testid': 'device-form-status' }}\n                checked={deviceInfo.status === 'Online'}\n                onChange={({ target: { checked } }) =>\n                  setDeviceInfo({\n                    ...deviceInfo,\n                    status: checked ? 'Online' : 'Offline',\n                  })\n                }\n              />\n            }\n            label={deviceInfo.status}\n          />\n        </FormGroup>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={() => handleClose(false)} color=\"primary\">\n          Cancel\n        </Button>\n        <Button\n          onClick={() => {\n            if (deviceInfo.id !== undefined) {\n              handleUpdate(deviceInfo);\n            } else {\n              handleCreate(deviceInfo);\n            }\n            handleClose(false);\n          }}\n          color=\"primary\"\n        >\n          Save\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default DeviceForm;\n","import React, { useState } from 'react';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionActions from '@material-ui/core/AccordionActions';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid';\nimport GatewayForm from './GatewayForm';\nimport DevicesList from './DevicesList';\nimport DeviceForm from './DeviceForm';\n\nconst GatewayCard = ({\n  gateway,\n  updateGateway,\n  deleteGateway,\n  createDevice,\n  updateDevice,\n  deleteDevice,\n}) => {\n  const [openForm, setOpenForm] = useState(false);\n  const [openDeviceForm, setOpenDeviceForm] = useState(false);\n  const [selectDevice, setSelectDevice] = useState({});\n\n  return (\n    <Accordion defaultExpanded={false}>\n      <AccordionSummary\n        expandIcon={<ExpandMoreIcon data-testid=\"expand-icon\" />}\n        aria-controls=\"panel1c-content\"\n        id=\"panel1c-header\"\n      >\n        <Grid container spacing={2}>\n          <Grid item xs={4}>\n            <Typography color=\"textSecondary\">ID: {gateway.id}</Typography>\n          </Grid>\n          <Grid item xs={4}>\n            <Typography color=\"textPrimary\">Name: {gateway.name}</Typography>\n          </Grid>\n          <Grid item xs={4}>\n            <Typography color=\"textPrimary\">IPv4: {gateway.ipv4}</Typography>\n          </Grid>\n        </Grid>\n      </AccordionSummary>\n      <AccordionDetails>\n        <Grid container spacing={2} justifyContent=\"center\">\n          <Grid item xs={12} md={8}>\n            <DevicesList\n              devices={gateway.devices}\n              gatewayId={gateway.id}\n              deleteDevice={deleteDevice}\n              openEditForm={() => setOpenDeviceForm(true)}\n              setSelectDevice={setSelectDevice}\n            />\n          </Grid>\n        </Grid>\n      </AccordionDetails>\n      <Divider />\n      <AccordionActions>\n        <Button\n          data-testid=\"edit-gateway\"\n          size=\"small\"\n          onClick={() => setOpenForm(true)}\n        >\n          Edit\n        </Button>\n        <Button\n          data-testid=\"delete-gateway\"\n          size=\"small\"\n          color=\"secondary\"\n          onClick={() => deleteGateway(gateway.id)}\n        >\n          Delete\n        </Button>\n      </AccordionActions>\n      <GatewayForm\n        key={'gateway' + openForm}\n        gateway={gateway}\n        open={openForm}\n        handleClose={setOpenForm}\n        handleSave={updateGateway}\n      />\n      <DeviceForm\n        key={'device' + openDeviceForm}\n        device={{ ...selectDevice, gatewayId: gateway.id }}\n        open={openDeviceForm}\n        handleClose={setOpenDeviceForm}\n        handleUpdate={updateDevice}\n        handleCreate={createDevice}\n      />\n    </Accordion>\n  );\n};\n\nexport default GatewayCard;\n","export const SERVER_URL = 'http://localhost:8000';\n\nexport const fetchAllGateways = async () => {\n  const response = await fetch(`${SERVER_URL}/gateways`, {\n    method: 'GET',\n  });\n  return await response.json();\n};\n\nexport const createGateway = async (data) => {\n  const response = await fetch(`${SERVER_URL}/gateways`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(data),\n  });\n  if (response.ok) {\n    return await response.json();\n  } else {\n    throw Error(await response.text());\n  }\n};\n\nexport const updateGateway = async (id, data) => {\n  const response = await fetch(`${SERVER_URL}/gateways/${id}`, {\n    method: 'PATCH',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(data),\n  });\n  if (response.ok) {\n    return await response.json();\n  } else {\n    throw Error(await response.text());\n  }\n};\n\nexport const deleteGateway = async (id) => {\n  const response = await fetch(`${SERVER_URL}/gateways/${id}`, {\n    method: 'DELETE',\n  });\n  return await response.json();\n};\n\nexport const updateDevice = async (gatewayId, id, data) => {\n  const response = await fetch(\n    `${SERVER_URL}/gateways/${gatewayId}/devices/${id}`,\n    {\n      method: 'PATCH',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(data),\n    },\n  );\n  return await response.json();\n};\nexport const deleteDevice = async (gatewayId, id) => {\n  const response = await fetch(\n    `${SERVER_URL}/gateways/${gatewayId}/devices/${id}`,\n    {\n      method: 'DELETE',\n    },\n  );\n  return await response.json();\n};\n","import { SERVER_URL } from './gatewayService';\n\nexport const createDevice = async (gatewayId, data) => {\n  const response = await fetch(`${SERVER_URL}/gateways/${gatewayId}/devices`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(data),\n  });\n  return await response.json();\n};\n\nexport const updateDevice = async (gatewayId, id, data) => {\n  const response = await fetch(\n    `${SERVER_URL}/gateways/${gatewayId}/devices/${id}`,\n    {\n      method: 'PATCH',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(data),\n    },\n  );\n  return await response.json();\n};\n\nexport const deleteDevice = async (gatewayId, id) => {\n  const response = await fetch(\n    `${SERVER_URL}/gateways/${gatewayId}/devices/${id}`,\n    {\n      method: 'DELETE',\n    },\n  );\n  return await response.json();\n};\n","import React, { useEffect, useState } from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\nimport GatewayCard from './components/GatewayCard';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport GatewayForm from './components/GatewayForm';\nimport AlertDialog from './components/AlertDialog';\nimport {\n  deleteGateway,\n  fetchAllGateways,\n  updateGateway,\n  createGateway,\n} from './services/gatewayService';\nimport {\n  createDevice,\n  deleteDevice,\n  updateDevice,\n} from './services/deviceService';\n\nfunction App() {\n  const [openForm, setOpenForm] = useState(false);\n  const [openError, setOpenError] = useState(false);\n  const [errorMsg, setErrorMsg] = useState('');\n  const [openAlert, setOpenAlert] = useState(false);\n  const [gateways, setGateways] = useState([]);\n  const [toBeDeleteGW, setToBeDeleteGW] = useState('');\n\n  const fetchData = async () => {\n    const data = await fetchAllGateways();\n    setGateways(data);\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const handleGatewayUpdate = async (data) => {\n    try {\n      await updateGateway(data.id, data);\n      const updatedData = await fetchAllGateways();\n      setGateways(updatedData);\n    } catch (error) {\n      setErrorMsg(error.message);\n      setOpenError(true);\n    }\n  };\n\n  const handleGatewayDelete = async () => {\n    await deleteGateway(toBeDeleteGW);\n    const updatedData = await fetchAllGateways();\n    setGateways(updatedData);\n  };\n\n  const handleGatewayCreate = async (data) => {\n    try {\n      await createGateway(data);\n      const updatedData = await fetchAllGateways();\n      setGateways(updatedData);\n    } catch (error) {\n      setErrorMsg(error.message);\n      setOpenError(true);\n    }\n  };\n\n  const handleDeviceUpdate = async ({ gatewayId, id, ...data }) => {\n    await updateDevice(gatewayId, id, data);\n    const updatedData = await fetchAllGateways();\n    setGateways(updatedData);\n  };\n\n  const handleDeviceDelete = async ({ gatewayId, id }) => {\n    await deleteDevice(gatewayId, id);\n    const updatedData = await fetchAllGateways();\n    setGateways(updatedData);\n  };\n\n  const handleDeviceCreate = async ({ gatewayId, ...data }) => {\n    await createDevice(gatewayId, data);\n    const updatedData = await fetchAllGateways();\n    setGateways(updatedData);\n  };\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Container maxWidth=\"md\" style={{ paddingTop: '1.5em' }}>\n        <Grid container spacing={3}>\n          <Grid container item xs={12}>\n            <Grid item xs={10}>\n              <Typography variant=\"h3\">Gateway Management</Typography>\n            </Grid>\n            <Grid item xs={2}>\n              <IconButton\n                data-testid=\"add-gateway-btn\"\n                color=\"primary\"\n                onClick={() => setOpenForm(true)}\n              >\n                <AddCircleIcon style={{ fontSize: 50 }} color=\"primary\" />\n              </IconButton>\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            {gateways.map((g) => (\n              <GatewayCard\n                key={g.id}\n                gateway={g}\n                updateGateway={handleGatewayUpdate}\n                deleteGateway={(gatewayId) => {\n                  setOpenAlert(true);\n                  setToBeDeleteGW(gatewayId);\n                }}\n                createDevice={handleDeviceCreate}\n                updateDevice={handleDeviceUpdate}\n                deleteDevice={handleDeviceDelete}\n              />\n            ))}\n          </Grid>\n        </Grid>\n        <GatewayForm\n          open={openForm}\n          handleClose={setOpenForm}\n          handleSave={handleGatewayCreate}\n        />\n        <AlertDialog\n          open={openAlert}\n          setOpen={setOpenAlert}\n          handleDelete={handleGatewayDelete}\n        />\n      </Container>\n      <Snackbar\n        open={openError}\n        autoHideDuration={6000}\n        onClose={() => setOpenError(false)}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n        message={errorMsg}\n      ></Snackbar>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}